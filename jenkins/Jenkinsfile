pipeline {
    agent any
    tools {
      'org.jenkinsci.plugins.docker.commons.tools.DockerTool' 'docker'
    }
    environment {
        CI = 'true'
    }
    stages {
        stage('Initialization'){
            steps{
                script{
                    nodeImage = docker.image('node:lts-bullseye-slim')
                    nodeImage.pull()
                    nodeImage.inside {
                        checkout scm
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Build'){
            steps{
                script{
                    nodeImage.inside{
                        sh "chmod +x -R ${env.WORKSPACE}"
                        sh './jenkins/scripts/deliver.sh'
                        sh './jenkins/scripts/kill.sh'
                        sh 'tar -cvf build.tar build'
                        stash(name: 'build', includes: 'build.tar') // archive to use in deploy stage
                        archiveArtifacts artifacts: 'build.tar', fingerprint: true // archive for jenkins artifacts
                    }
                }
            }
        }

        stage('Deliver') {
            steps{
                script{
                    nodeImage.inside{
                        withCredentials(bindings: [sshUserPrivateKey(credentialsId: 'SSH_PRIVATE_KEY', \
                                                                         keyFileVariable: 'sshKey', \
                                                                         passphraseVariable: '', \
                                                                         usernameVariable: 'userName')]) {
                             script{
                                def remote = [:]
                                remote.name= env.SSH_USERNAME
                                remote.user = env.SSH_USERNAME
                                remote.host = SSH_HOST
                                remote.identityFile=sshKey
                                remote.allowAnyHosts = true
                                sh "rm -rf html"
                                sh "mv ./build ./html"
                                sshRemove remote:remote, path: "/usr/share/nginx/html", failOnError: false
                                sshPut remote: remote, from: './html/', into: '/usr/share/nginx/'
                             }
                        }
                    }
                }
            }
        }
    }
}